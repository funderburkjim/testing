p = 1 (5);  p = 1 + 5k; n*n == n2 = 5 (p) ; n2 = 5 + jp = 5 + j + 5jk
When is 5 a square (mod p)
For given k, is there always j so 5+j+5jk is a square?
k = 2i+1, 5k = 10i+5, p=10i+6; n2 = 5+10i+6 = 10 + 10i + 1 = 10b+1 (b = i+1)
n =2c+1, n2 = 1+4c+4cc = 10b+1; 4c+4cc = 10b; 2c+2cc = 5b; b = 2d;
c + cc=5d; c = 4; c+cc=20; d=4; b = 2d=8;  n2=10b+1 = 81, n=9; i = 7; k = 2i+1=15;
p = 1+5k = 1+5*15 = 76; 9*9 = 5 + 76. So 76 is a non-prime, and 5 is a quadratic
residue mod 76
c = 5; c+cc = 30; d = 6; b = 2d = 12;n = 2c+1=11; i = b-1=11; k=2i+1=2*11+1=23;
p = 1+5k = 1+5*23 = 116; 11*11 = 5 + 116*1.  5 is q.r. modulo 116.
k = 1;  p = 6 (not a prime) Is there n and j s.t. n2 = 5+j+5j = 5+6j
 try j = 5r: 5 + 6*5r = 5 + 30r = 5(1+6r); 1+6r = 5*m*m =
k=2: p = 11 = 1 + 5*2 (prime) n2 = 5 + j + 10j = 5 + 11j ; j = 1; 5 + 11 = 16 = 4*4, n = 4
4*4 = 16 = 5 + 11*1.  so 5 is a quadratic residue of 11.
k = 3; p=1 + 5*3 = 16 (not prime); n2 = 5 + j*16
k = 4; p=1 + 5*4 = 21 (not prime)  n2 = 5+j*21
k = 5; p=1 + 5*5 = 26
k = 6; p=1+5*6=31 (prime), n2 = 5+j*31
k=7; p=36    k = 8; p=41 (prime)

Is 5 a q.r. mod 7?  n2 = 5 + j7  

p is semi-even IFF p % 4 == 1  (thus (p-1)//2 is even)
p is semi-odd  IFF p % 4 == 3  (thus (p-1)//2 is odd)

(q|p) legendre symbol for integers q and p with p != 0
  0 if p divides q
  1 if p does not divide q AND q is a square modulo p
 -1 if p is not a square modulo p

Quadratic reciprocity formula:
 IF
  p is a prime AND p!=2
  q is a prime AND q!=2
  p!=q
 THEN
  (p|q) * (q|p) = (-1)**e, where e == ((p-1)//2) * ((q-1)//2)
Note 1:
 e is EVEN iff (either p is semi-even OR q is semi-even)
 e is ODD  iff (p is semi-odd AND q is semi-odd)
Note 2:
 if p is semi-even, then q is a square mod p IFF p is a square mod q.
 if q is semi-even, then q is a square mod p IFF p is a square mod q.
 if p is semi-odd AND q is semi-odd, then
   q is a square mod p IFF p is not a square mod q.

from numtheory1 import squares_mod
from prime import prime_factors
import itertools
sq5 = [p for p in range(3,100) if 5 in squares_mod(p)]
pf = [prime_factors(n) for n in sq5]
# each element is a dictionary with the prime factors and exponents
pfkeys = [list(d.keys()) for d in pf]
primesq5 = list(set(itertools.chain(*pfkeys)))
# [2, 5, 71, 41, 11, 79, 19, 61, 89, 59, 29, 31]
[p % 5 for p in primesq5 if p not in [2,5]]
# [1, 1, 1, 4, 4, 1, 4, 4, 4, 1]
# squares mod 5
squares_mod(5)
# {1,4}
---------------------------
Wikipedia example:
5 % 4 == 1
squares_mod(5) 
# {1, 4}
prime factors of (n*n - 5)
pf = [prime_factors(n*n - 5) for n in range(3,46)]
pfkeys = [list(d.keys()) for d in pf]
primesq5 = list(set(itertools.chain(*pfkeys)))
sorted(primesq5)
# [2, 5, 11, 19, 29, 31, 41, 59, 61, 71, 79, 89, 101, 109, 131, 139, 179, 181, 191, 239, 251, 271, 379, 419, 461, 479, 571, 1019, 1151, 1291, 1439, 1759, 1931]
{p % 5 for p in primesq5 if p not in [2,5]}
# {1,4} = squares_mod(5)

7 % 4 == 3
squares_mod(7)
# {1,2,4}
#prime factors of (n*n - 7)
pf = [prime_factors(n*n - 7) for n in range(3,46)]
pfkeys = [list(d.keys()) for d in pf]
primesq7 = list(set(itertools.chain(*pfkeys)))
sorted(primesq7)
# [2, 3, 7, 19, 29, 31, 37, 47, 53, 59, 83, 103, 109, 113, 131, 137, 139, 223, 227, 251, 307, 317, 383, 479, 541, 569, 643, 757, 1009, 1289]
{p % 7 for p in primesq7 if p not in [2,7]}
{1, 2, 3, 4, 5, 6}   # Wow quite different from  n=5 example
example: 44*44 - 7 = 3*643, so 44*44 = 7 (mod 3); i.e. 7 is a square mod 3.
BUT 3 is NOT a square mod 7.
p = 3, q = 7
(3|7) = -1,  (7|3) = 1.
(3-1)/2 = 1, (7-1)/2 = 3.  (-1)**(1*3) = (-1)**3 = -1.

11 % 4 == 3
squares_mod(11)
# {1, 3, 4, 5, 9}
#prime factors of (n*n - 11)
pf = [prime_factors(n*n - 11) for n in range(3,46)]
pfkeys = [list(d.keys()) for d in pf]
primesq11 = list(set(itertools.chain(*pfkeys)))
sorted(primesq11)
{p % 11 for p in primesq11 if p not in [2,11]}
# {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}

13 % 4 == 1
squares_mod(13)
# {1, 3, 4, 9, 10, 12}
#prime factors of (n*n - 13)
pf = [prime_factors(n*n - 13) for n in range(3,46)]
pfkeys = [list(d.keys()) for d in pf]
primesq13 = list(set(itertools.chain(*pfkeys)))
sorted(primesq13)
{p % 13 for p in primesq13 if p not in [2,13]}
# {1, 3, 4, 9, 10, 12}
=============================================================

from prime import prime_set
primelist = sorted(list(prime_set))
assert primelist[0] == 2
oddprimes = primelist[1:]  # exclude even prime 2
oddprimes = oddprimes[:10] # test first 10 odd primes
nprimes = len(oddprimes)
sqmods = {}
for p in oddprimes:
 sqmods[p] = squares_mod(p)

ans = []
for i in range(nprimes):
 for j in range(i+1,nprimes):
  p = oddprimes[i]
  q = oddprimes[j]
  p_q = p in sqmods[q]
  q_p = q in sqmods[p]
  pse = ((p % 4) == 1)  # p is semi-even
  qse = ((q % 4) == 1)  # q is semi-even
  ans0 = (p,q,p_q,q_p,pse,qse)
  ans.append(ans0)


